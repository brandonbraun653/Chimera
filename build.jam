# ====================================================
# Local Rules 
# ====================================================
local rule explicit_alias ( name : sources * : requirements * : default-build * : usage-requirements * )
    {
    alias $(name) : $(sources) : $(requirements) : $(default-build) : $(usage-requirements) ;
    explicit $(name) ;
    }

# ====================================================
# Local Resources 
# ====================================================
# ------------------------------------------
# Source/Include Directories 
# ------------------------------------------
local chimera_inc_dir = . ; # Expects the user to reference headers like <Chimera/some_file.hpp>
local chimera_mock_inc_dir = ./../ ;
local chimera_port_sim_inc_dir = Chimera/modules/sim ;
local chimera_src_dir = Chimera ;
local chimera_src_sim_dir = Chimera/sim ;

# ------------------------------------------
# Source Files
# ------------------------------------------
local chimera_src_root = [ glob Chimera/*.cpp ] ;
local chimera_src_sim = [ glob $(chimera_src_sim_dir)/*.cpp ] ;
local chimera_src_modules_memory = Chimera/modules/memory/chimera_memory_device.cpp ;
local chimera_src_modules_freertos = [ glob Chimera/modules/freertos/*.cpp ] ;

local chimera_src = 
    $(chimera_src_root)
    $(chimera_src_modules_freertos)
    ;

# ====================================================
# Project Definition
# ====================================================
project Chimera : usage-requirements <include>$(chimera_inc_dir) ;

use-project /ALGORITHM :            Chimera/src/algorithm ; 
use-project /ALLOCATOR :            Chimera/src/allocator ;
use-project /BUFFER :               Chimera/src/buffer ;
use-project /COMMON :               Chimera/src/common ;
use-project /CONTAINER :            Chimera/src/container ;
use-project /PERIPH/GPIO :          Chimera/src/peripherals/gpio ;
use-project /PERIPH/SPI :           Chimera/src/peripherals/spi ;
use-project /PERIPH/UART :          Chimera/src/peripherals/uart ;
use-project /PERIPH/USART :         Chimera/src/peripherals/usart ;
use-project /PERIPH/WATCHDOG :      Chimera/src/peripherals/watchdog ;
use-project /SYSTEM :               Chimera/src/system ; 
use-project /THREADING :            Chimera/src/threading ;


# ====================================================
# Public Targets
# ====================================================
# ------------------------------------------
# Includes all common Chimera headers
# -----------------------------------------
alias PUB 
  : 
  : <FreeRTOS>disabled 
  : 
  : 
    <include>$(chimera_inc_dir)
    <use>/PRJ//BOOST
    <use>/PRJ//CHIMERA_PORT
    <use>/PRJ//CHIMERA_DEFS
    
    <define>USING_STL_THREADS
  ;

alias PUB 
  : 
  : <FreeRTOS>enabled 
  : 
  : <include>$(chimera_inc_dir)
    <use>/FREERTOS//PUB
    <use>/PRJ//BOOST
    <use>/PRJ//CHIMERA_PORT
    <use>/PRJ//CHIMERA_DEFS
  
    <define>USING_FREERTOS_THREADS
  ;
explicit PUB ;


explicit_alias PUB_MOCK : : : : <include>$(chimera_mock_inc_dir) ;
explicit_alias PUB_SIM : : : : <include>$(chimera_port_sim_inc_dir) ;

alias PRV 
    : 
    : <FreeRTOS>disabled
    : 
    : <include>./Chimera/src/threading/stl
    ;

alias PRV
    :
    : <FreeRTOS>enabled
    :
    : <include>./Chimera/src/threading/freertos 
    ;
explicit PRV ;


# ------------------------------------------
# Includes all common FreeRTOS headers
# -----------------------------------------
explicit_alias _RTOS : : : 
    :   <define>USING_FREERTOS
        <use>/FREERTOS//PUB
        <use>/PRJ//FREERTOS_CFG
    ;

# ------------------------------------------
# Thor Backend Driver without FreeRTOS
# ------------------------------------------
lib CORE
    :   $(chimera_src)

    :   <Chimera>enabled-Thor
        <FreeRTOS>disabled
        <link>static
        <include>$(chimera_inc_dir)
        
        <library>/THOR//CORE

        <use>/THOR//PUB                         # Thor Headers
        <use>/THOR//TARGET_PROPAGATED_OPTIONS   # Thor Target Headers
        <use>/PRJ//CHIMERA_PORT                 # chimeraPort.hpp
        <use>/PRJ//EIGEN
    ;

# ------------------------------------------
# Thor Backend Driver with FreeRTOS
# ------------------------------------------
lib CORE
    :   $(chimera_src_root)
        $(chimera_src_modules_memory)
        $(chimera_src_modules_freertos)

    :   <Chimera>enabled
        <Chimera-backend>Thor
        <FreeRTOS>enabled
        <Thor>enabled
        <link>static
        <include>$(chimera_inc_dir)

        <library>/THOR//CORE
        <library>/FREERTOS//CORE

        <use>_RTOS                              # Pull in FreeRTOS from the alias up above
        <use>/THOR//PUB                         # Thor Headers    
        <use>/THOR//TARGET_PROPAGATED_OPTIONS                    # Thor Target Headers
        <use>/PRJ//BOOST                        # All things boost
        <use>/PRJ//CHIMERA_PORT                 # chimeraPort.hpp
        <use>/PRJ//CHIMERA_DEFS                 # Missing #defines normally included in the backend driver
        <use>/PRJ//EIGEN
    ;

# ------------------------------------------
# Simulator Backend Driver without FreeRTOS
# ------------------------------------------
lib CORE
    :   $(chimera_src_root)
        $(chimera_src_modules_memory)

    :   <Chimera>enabled-Sim
        <FreeRTOS>disabled
        <link>static
        <include>$(chimera_inc_dir)
        <include>$(chimera_port_sim_inc_dir)    # chimeraPort.hpp
        <define>NOMINMAX
        <define>SIM

        <use>/PRJ//BOOST                        # All things boost
        <use>/PRJ//CHIMERA_DEFS                 # Missing #defines normally included in the backend driver
        <use>/PRJ//EIGEN
    ;

# ------------------------------------------
# Simulator Backend Driver with FreeRTOS
# ------------------------------------------
lib CORE
    :   $(chimera_src_root)
        $(chimera_src_sim)
        $(chimera_src_modules_memory)
        $(chimera_src_modules_freertos)

    :   <Chimera>enabled-Sim
        <FreeRTOS>enabled
        <link>static
        <include>$(chimera_inc_dir)
        <include>$(chimera_port_sim_inc_dir)    # chimeraPort.hpp
        <define>NOMINMAX
        <define>SIM

        <library>/FREERTOS//CORE

        <use>_RTOS                              # Pull in FreeRTOS from the alias up above
        <use>/PRJ//BOOST                        # All things boost
        <use>/PRJ//CHIMERA_DEFS                 # Missing #defines normally included in the backend driver
        <use>/PRJ//CHIMERA_PORT
        <use>/PRJ//EIGEN

        <cov>enabled:<use>/COVERAGE//FLAGS
    :
    :   <toolset>msvc:<define>NOMINMAX
    ;

explicit CORE ;

explicit_alias CHIMERA_CORE : CORE ;


explicit_alias TEST_COMPILE
    :   /ALGORITHM//LIB
        /ALLOCATOR//LIB
        /BUFFER//LIB
        /COMMON//LIB
        /CONTAINER//LIB
        /PERIPH/GPIO//LIB
        /PERIPH/SPI//LIB
        /PERIPH/UART//LIB
        /PERIPH/USART//LIB
        /PERIPH/WATCHDOG//LIB
        /SYSTEM//LIB
        /THREADING//LIB
    ;